# PyLint config
# Based on Google apitools code default.pylintrc.
# See also: https://raw.githubusercontent.com/google/apitools/master/default.pylintrc
#

[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore= CVS

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Use multiple processes to speed up Pylint.
jobs=1

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=numpy, cv2, daslog, rx

# Allow optimization of some AST trees. This will activate a peephole AST
# optimizer, which will apply various small optimizations. For instance, it can
# be used to obtain the result of joining multiple strings with the addition
# operator. Joining a lot of strings can lead to a maximum recursion error in
# Pylint and this flag can prevent that. It has one side effect, the resulting
# AST will be different than the one from reality. This option is deprecated
# and it will be removed in Pylint 2.0.
optimize-ast=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
disable =
    import-star-module-level,
    old-octal-literal,
    oct-method,
    print-statement,
    unpacking-in-except,
    parameter-unpacking,
    backtick,
    old-raise-syntax,
    old-ne-operator,
    long-suffix,
    dict-view-method,
    dict-iter-method,
    metaclass-assignment,
    next-method-called,
    raising-string,
    indexing-exception,
    raw_input-builtin,
    long-builtin,
    file-builtin,
    execfile-builtin,
    coerce-builtin,
    cmp-builtin,
    buffer-builtin,
    basestring-builtin,
    apply-builtin,
    filter-builtin-not-iterating,
    using-cmp-argument,
    useless-suppression,
    range-builtin-not-iterating,
    suppressed-message,
    no-absolute-import,
    old-division,
    cmp-method,
    reload-builtin,
    zip-builtin-not-iterating,
    intern-builtin,
    unichr-builtin,
    reduce-builtin,
    standarderror-builtin,
    unicode-builtin,
    xrange-builtin,
    coerce-method,
    delslice-method,
    getslice-method,
    setslice-method,
    input-builtin,
    round-builtin,
    hex-method,
    nonzero-method,
    map-builtin-not-iterating,
    I0011,
    I0013,
    C0103, #invalid name
    redefined-outer-name,
    missing-docstring

# Google disables the following ones. TODO: add them if reasonable
# disable =
#    cyclic-import,
#    fixme,
#    import-error,
#    inconsistent-return-statements,
#    locally-disabled,
#    locally-enabled,
#    no-member,
#    no-name-in-module,
#    no-self-use,
#    super-on-old-class,
#    too-many-arguments,
#    too-many-function-args,


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
# DEFAULT:  reports=yes
# RATIONALE:  run from Travis / tox, and don't need / want to parse output.
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (RP0004).
# DEFAULT:  comment=no

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=


[SIMILARITIES]

# Minimum lines number of a similarity.
# DEFAULT:  min-similarity-lines=4
min-similarity-lines=15

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
# DEFAULT:  ignore-imports=no
ignore-imports=yes


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
# DEFAULT:  init-import=no

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=^\*{0,2}(_$|unused_|dummy_)


# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
# DEFAULT:  additional-builtins=


[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format
# DEFAULT:  logging-modules=logging


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=120

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled
# DEFAULT:  no-space-check=trailing-comma,dict-separator
# RATIONALE: pylint ignores whitespace checks around the
#            constructs "dict-separator" (cases like {1:2}) and
#            "trailing-comma" (cases like {1: 2, }).
#            By setting "no-space-check" to empty whitespace checks will be
#            enforced around both constructs.
no-space-check =

# Maximum number of lines in a module
# DEFAULT:  max-module-lines=1000
max-module-lines=1500

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[BASIC]

# Regular expression which should only match function or class names that do
# not require a docstring.
# DEFAULT:  no-docstring-rgx=__.*__
no-docstring-rgx=(__.*__|main|^_)

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
# DEFAULT:  docstring-min-length=-1
docstring-min-length=10

# Regular expression which should only match correct module names. The
# leading underscore is sanctioned for private modules by Google's style
# guide.
module-rgx=^(_?[a-z][a-z0-9_]*)|__init__$

# Regular expression matching correct constant names
# DEFAULT:  const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$
const-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$

# Regular expression matching correct class attribute names
# DEFAULT:  class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$
class-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$

# Regular expression matching correct class names
# DEFAULT:  class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=^_?[A-Z][a-zA-Z0-9]*$

# Regular expression which should only match correct function names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods.
function-rgx=^(?:(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$

# Regular expression which should only match correct method names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods. 'exempt' indicates a name which is
# consistent with all naming styles.
method-rgx=^(?:(?P<exempt>__[a-z0-9_]+__|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$

# Regular expression matching correct attribute names
# DEFAULT:  attr-rgx=[a-z_][a-z0-9_]{2,30}$
attr-rgx=^_{0,2}[a-z][a-z0-9_]*$

# Regular expression matching correct argument names
# DEFAULT:  argument-rgx=[a-z_][a-z0-9_]{2,30}$
argument-rgx=^[a-z][a-z0-9_]*$

# Regular expression matching correct variable names
# DEFAULT:  variable-rgx=[a-z_][a-z0-9_]{2,30}$
variable-rgx=^[a-z][a-z0-9_]*$

# Regular expression matching correct inline iteration names
# DEFAULT:  inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
inlinevar-rgx=^[a-z][a-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
# DEFAULT:  good-names=i,j,k,ex,Run,_
good-names=main,_

# Bad variable names which should always be refused, separated by a comma
# DEFAULT:  bad-names=foo,bar,baz,toto,tutu,tata
bad-names=

# List of builtins function names that should not be used, separated by a comma
# <http://go/python-style#Deprecated_Language_Features>
bad-functions=input,apply,reduce


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
# DEFAULT:  ignore-mixin-members=yes

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis
# DEFAULT:  ignored-modules=
ignored-modules=

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
# DEFAULT:  ignored-classes=SQLObject
ignored-classes = AppConfig, Observable

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
# DEFAULT:  zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
# DEFAULT:  generated-members=REQUEST,acl_users,aq_parent

[ELIF]
max-nested-blocks=6

[DESIGN]

# Maximum number of arguments for function / method
# DEFAULT:  max-args=5
# RATIONALE:  API-mapping
max-args = 14

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
# DEFAULT:  max-locals=15
max-locals=24

# Maximum number of return / yield for function / method body
# DEFAULT:  max-returns=6
max-returns=9

# Maximum number of branch for function / method body
# DEFAULT:  max-branches=12
max-branches=21

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
# DEFAULT:  max-attributes=7
# RATIONALE:  API mapping
max-attributes=19

# Minimum number of public methods for a class (see R0903).
# DEFAULT:  min-public-methods=2
# RATIONALE:  context mgrs may have *no* public methods
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make

[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
# DEFAULT:  overgeneral-exceptions=Exception
